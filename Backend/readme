Finance Tracker Backend
This is the backend for a Finance Tracker application. It provides API endpoints to manage user authentication, transactions, goals, budgets, and more. The backend uses MongoDB, Node.js, Express, and several other tools to help users manage their financial data efficiently.

Features
User Authentication: Register and login using JWT authentication.
Transaction Management: Add, update, delete, and view financial transactions.
Budget Management: Renew budgets daily and process recurring transactions.
Goal Management: Set financial goals and track progress.
Notifications: Email notifications for upcoming and missed transactions.
Reports: Generate reports on financial activities.
Technologies Used
Node.js: Backend framework for building the API.
Express.js: Web framework for routing and handling requests.
MongoDB: Database for storing transactions, users, goals, etc.
Mongoose: ODM to interact with MongoDB easily.
JWT: For secure token-based authentication.
Node-Cron: To schedule and automate recurring tasks.
Nodemailer: For email notifications.
Helmet: For securing HTTP headers.
CORS: For enabling Cross-Origin Resource Sharing.
dotenv: To manage environment variables.
Installation
1. Clone the Repository
bash
Copy
Edit
git clone https://github.com/yourusername/finance-tracker-backend.git
cd finance-tracker-backend
2. Install Dependencies
bash
Copy
Edit
npm install
This will install the required dependencies for your project.

3. Set Up Environment Variables
Create a .env file in the root directory and configure the environment variables:

env
Copy
Edit
PORT=5000
MONGO_URI=<your_mongo_db_connection_string>
JWT_SECRET=your_jwt_secret
MONGO_URI: The MongoDB connection string for your database (can be MongoDB Atlas or a local instance).
JWT_SECRET: A secret string to sign and verify JWT tokens.
4. Run the Application
To start the server, use the following command:

bash
Copy
Edit
npm start
This will start the server on http://localhost:5000.

5. Test the API Endpoints
You can now use Postman or any other API client to test the endpoints.

6. Cron Jobs
This project includes cron jobs that are scheduled to run at specific times:

Budget Renewal: Runs every day at midnight.
Recurring Transactions: Processes transactions daily at 12:05 AM.
Upcoming Transaction Notifications: Sends notifications every day at 9:00 AM.
Missed Transaction Notifications: Sends notifications every day at 10:00 AM.
These jobs are automatically scheduled when the server starts.

API Documentation
Authentication
POST /api/v1/auth/register: Register a new user.

Request Body:

json
Copy
Edit
{
  "email": "user@example.com",
  "password": "password123"
}
POST /api/v1/auth/login: Login a user and get a JWT token.

Request Body:

json
Copy
Edit
{
  "email": "user@example.com",
  "password": "password123"
}
Transactions
POST /api/v1/transaction: Create a new transaction.

Request Body:

json
Copy
Edit
{
  "amount": 100,
  "category": "Food",
  "date": "2025-03-01",
  "description": "Lunch"
}
GET /api/v1/transaction: Get all transactions.

GET /api/v1/transaction/:id: Get a specific transaction by ID.

PUT /api/v1/transaction/:id: Update a transaction.

Request Body:

json
Copy
Edit
{
  "amount": 200,
  "category": "Entertainment",
  "date": "2025-03-01",
  "description": "Movie"
}
DELETE /api/v1/transaction/:id: Delete a transaction by ID.

Budgets
GET /api/v1/budget: Get all budgets.

POST /api/v1/budget: Create a new budget.

Request Body:

json
Copy
Edit
{
  "category": "Food",
  "limit": 500
}
PUT /api/v1/budget/:id: Update a budget.

DELETE /api/v1/budget/:id: Delete a budget.

Goals
GET /api/v1/goal: Get all financial goals.

POST /api/v1/goal: Create a new goal.

Request Body:

json
Copy
Edit
{
  "goalName": "Save for a vacation",
  "amount": 2000,
  "targetDate": "2025-12-31"
}
PUT /api/v1/goal/:id: Update a goal.

DELETE /api/v1/goal/:id: Delete a goal.

Reports
GET /api/v1/report: Generate a report for the financial activities.

Request Parameters (Optional):

json
Copy
Edit
{
  "startDate": "2025-01-01",
  "endDate": "2025-12-31"
}
Cron Jobs
This backend includes cron jobs for handling regular tasks:

1. Budget Renewal Task
Runs at: Every day at midnight.
Purpose: Renew budgets for the day.
2. Recurring Transactions Processing
Runs at: Every day at 12:05 AM.
Purpose: Process any recurring transactions (e.g., monthly bills).
3. Upcoming Transaction Notifications
Runs at: Every day at 9:00 AM.
Purpose: Send notifications to users about upcoming transactions.
4. Missed Transaction Notifications
Runs at: Every day at 10:00 AM.
Purpose: Notify users about missed transactions.
Contributing
Fork the repository.
Create a new branch (git checkout -b feature/your-feature).
Commit your changes (git commit -m 'Add some feature').
Push to the branch (git push origin feature/your-feature).
Open a pull request.
License
This project is licensed under the ISC License - see the LICENSE file for details.